{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","h","m","s","time","setTime","interv","setInterv","isClicked","setIsClicked","status","setStatus","updatedS","updatedM","updatedH","run","className","type","onClick","clearInterval","setInterval","setTimeout","reset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAGe,SAASA,IACtB,MAAwBC,mBAAS,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAAlD,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BL,qBAA5B,mBAAOM,EAAP,KAAeC,EAAf,KACA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAA4BT,mBAAS,GAArC,mBAAOU,EAAP,KAAeC,EAAf,KA6BIC,EAAWR,EAAKD,EAChBU,EAAWT,EAAKF,EAChBY,EAAWV,EAAKH,EAEdc,EAAM,WAYV,OAXiB,KAAbF,IACFC,GAAYA,EAAW,EACvBD,EAAW,GAGI,KAAbD,IACFC,GAAsB,EACtBD,EAAW,GAINP,EAAQ,CAACJ,EAAEa,EAAUZ,EAAEW,EAAUV,EADxCS,GAAsB,KAmBxB,OACE,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,QAAd,uBACA,sBAAKA,UAAU,YAAf,UACG,sBAAMA,UAAU,OAAhB,SAAyBZ,EAAKH,GAAK,GAAMG,EAAKH,EAAtB,WAA+BG,EAAKH,KAD/D,YAEG,sBAAMe,UAAU,OAAhB,SAAyBZ,EAAKF,GAAK,GAAME,EAAKF,EAAtB,WAA+BE,EAAKF,KAF/D,YAGG,sBAAMc,UAAU,OAAhB,SAAyBZ,EAAKD,GAAK,GAAMC,EAAKD,EAAtB,WAA+BC,EAAKD,QAE/D,sBAAKa,UAAU,YAAf,UACE,wBAAQC,KAAK,SAASD,UAAU,WAAWE,QAtErC,WACZ,GAAe,IAAXR,EAKF,OAJAS,cAAcb,GACdD,EAAQ,CAAEJ,EAAG,EAAGC,EAAG,EAAGC,EAAG,IACzBQ,EAAU,QACVJ,EAAU,GAGZQ,IACAR,EAAUa,YAAYL,EAAK,MAC3BJ,EAAU,IA4DJ,wBACA,wBAAQM,KAAK,SAASD,UAAU,WAAWE,QA1DtC,WACX,GAAIV,GACGF,EAIF,OAHAa,cAAcb,GACdG,GAAa,QACbE,EAAU,GAIfF,GAAa,GACbY,YAAW,kBAAMZ,GAAa,KAAQ,MAgDhC,kBACA,wBAAQQ,KAAK,SAASD,UAAU,WAAWE,QAAS,kBA1B9C,WACZ,GAAIZ,EASF,OARAa,cAAcb,GACdC,EAAU,GACVF,EAAQ,CAAEJ,EAAG,EAAGC,EAAG,EAAGC,EAAG,IACzBS,EAAW,EACXC,EAAW,EACXC,EAAW,EACXP,EAAUa,YAAYL,EAAK,WAC3BJ,EAAU,GAiBoDW,IAA1D,yBCjFV,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bb309585.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [time, setTime] = useState({ h: 0, m: 0, s: 0 });\n  const [interv, setInterv] = useState();\n  const [isClicked, setIsClicked] = useState(false);\n  const [status, setStatus] = useState(0);\n \n  const start = () => {\n    if (status === 1) {\n      clearInterval(interv);\n      setTime({ h: 0, m: 0, s: 0 });\n      setStatus(0);\n      setInterv(0);\n      return;\n    }\n    run();\n    setInterv(setInterval(run, 1000));\n    setStatus(1);\n  }\n  \n  const wait = () => {\n    if (isClicked) {\n       if (interv) {\n         clearInterval(interv);\n         setIsClicked(false);\n         setStatus(0);\n         return;\n       }\n    };\n    setIsClicked(true);\n    setTimeout(() => setIsClicked(false), 300);\n   \n }\n  \n  let updatedS = time.s;\n  let updatedM = time.m;\n  let updatedH = time.h;\n\n  const run = () => {\n    if (updatedM === 60) {\n      updatedH += updatedH + 1;\n      updatedM = 0;\n    }\n\n    if (updatedS === 60) {\n      updatedM = updatedM + 1;\n      updatedS = 0;\n    }\n\n    updatedS = updatedS + 1;\n    return setTime({h:updatedH, m:updatedM, s:updatedS});\n  }\n\n  const reset = () => {\n    if (interv) {\n      clearInterval(interv);\n      setInterv(0);\n      setTime({ h: 0, m: 0, s: 0 });\n      updatedS = 0;\n      updatedM = 0;\n      updatedH = 0;\n      setInterv(setInterval(run, 1000));\n      setStatus(1);\n      return;\n    }\n  }\n\n\n  return (\n    <div className=\"stopwatcher\">\n        <h2 className=\"title\">STOPWATCH</h2>\n        <div className=\"clockFace\">\n           <span className=\"time\">{(time.h >= 10) ? time.h :  `0${time.h}`}</span>&nbsp;:&nbsp;\n           <span className=\"time\">{(time.m >= 10) ? time.m :  `0${time.m}`}</span>&nbsp;:&nbsp;\n           <span className=\"time\">{(time.s >= 10) ? time.s :  `0${time.s}`}</span>\n        </div>\n        <div className=\"clockBtns\">\n          <button type='button' className=\"clockBtn\" onClick={start}>Start/Stop</button>\n          <button type='button' className=\"clockBtn\" onClick={wait}>Wait</button>\n          <button type='button' className=\"clockBtn\" onClick={() => reset()}>Reset</button>\n        </div>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}